// Code generated by mockery v2.42.3. DO NOT EDIT.

package server

import (
	context "context"
	json "encoding/json"

	gotgbot "github.com/PaulSonOfLars/gotgbot/v2"

	mock "github.com/stretchr/testify/mock"
)

// MockCustomTgClient is an autogenerated mock type for the CustomTgClient type
type MockCustomTgClient struct {
	mock.Mock
}

type MockCustomTgClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomTgClient) EXPECT() *MockCustomTgClient_Expecter {
	return &MockCustomTgClient_Expecter{mock: &_m.Mock}
}

// FileURL provides a mock function with given fields: token, tgFilePath, opts
func (_m *MockCustomTgClient) FileURL(token string, tgFilePath string, opts *gotgbot.RequestOpts) string {
	ret := _m.Called(token, tgFilePath, opts)

	if len(ret) == 0 {
		panic("no return value specified for FileURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, *gotgbot.RequestOpts) string); ok {
		r0 = rf(token, tgFilePath, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCustomTgClient_FileURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileURL'
type MockCustomTgClient_FileURL_Call struct {
	*mock.Call
}

// FileURL is a helper method to define mock.On call
//   - token string
//   - tgFilePath string
//   - opts *gotgbot.RequestOpts
func (_e *MockCustomTgClient_Expecter) FileURL(token interface{}, tgFilePath interface{}, opts interface{}) *MockCustomTgClient_FileURL_Call {
	return &MockCustomTgClient_FileURL_Call{Call: _e.mock.On("FileURL", token, tgFilePath, opts)}
}

func (_c *MockCustomTgClient_FileURL_Call) Run(run func(token string, tgFilePath string, opts *gotgbot.RequestOpts)) *MockCustomTgClient_FileURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*gotgbot.RequestOpts))
	})
	return _c
}

func (_c *MockCustomTgClient_FileURL_Call) Return(_a0 string) *MockCustomTgClient_FileURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCustomTgClient_FileURL_Call) RunAndReturn(run func(string, string, *gotgbot.RequestOpts) string) *MockCustomTgClient_FileURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPIURL provides a mock function with given fields: opts
func (_m *MockCustomTgClient) GetAPIURL(opts *gotgbot.RequestOpts) string {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*gotgbot.RequestOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCustomTgClient_GetAPIURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIURL'
type MockCustomTgClient_GetAPIURL_Call struct {
	*mock.Call
}

// GetAPIURL is a helper method to define mock.On call
//   - opts *gotgbot.RequestOpts
func (_e *MockCustomTgClient_Expecter) GetAPIURL(opts interface{}) *MockCustomTgClient_GetAPIURL_Call {
	return &MockCustomTgClient_GetAPIURL_Call{Call: _e.mock.On("GetAPIURL", opts)}
}

func (_c *MockCustomTgClient_GetAPIURL_Call) Run(run func(opts *gotgbot.RequestOpts)) *MockCustomTgClient_GetAPIURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gotgbot.RequestOpts))
	})
	return _c
}

func (_c *MockCustomTgClient_GetAPIURL_Call) Return(_a0 string) *MockCustomTgClient_GetAPIURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCustomTgClient_GetAPIURL_Call) RunAndReturn(run func(*gotgbot.RequestOpts) string) *MockCustomTgClient_GetAPIURL_Call {
	_c.Call.Return(run)
	return _c
}

// RequestWithContext provides a mock function with given fields: ctx, token, method, params, data, opts
func (_m *MockCustomTgClient) RequestWithContext(ctx context.Context, token string, method string, params map[string]string, data map[string]gotgbot.NamedReader, opts *gotgbot.RequestOpts) (json.RawMessage, error) {
	ret := _m.Called(ctx, token, method, params, data, opts)

	if len(ret) == 0 {
		panic("no return value specified for RequestWithContext")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, map[string]gotgbot.NamedReader, *gotgbot.RequestOpts) (json.RawMessage, error)); ok {
		return rf(ctx, token, method, params, data, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, map[string]gotgbot.NamedReader, *gotgbot.RequestOpts) json.RawMessage); ok {
		r0 = rf(ctx, token, method, params, data, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string, map[string]gotgbot.NamedReader, *gotgbot.RequestOpts) error); ok {
		r1 = rf(ctx, token, method, params, data, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomTgClient_RequestWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestWithContext'
type MockCustomTgClient_RequestWithContext_Call struct {
	*mock.Call
}

// RequestWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - method string
//   - params map[string]string
//   - data map[string]gotgbot.NamedReader
//   - opts *gotgbot.RequestOpts
func (_e *MockCustomTgClient_Expecter) RequestWithContext(ctx interface{}, token interface{}, method interface{}, params interface{}, data interface{}, opts interface{}) *MockCustomTgClient_RequestWithContext_Call {
	return &MockCustomTgClient_RequestWithContext_Call{Call: _e.mock.On("RequestWithContext", ctx, token, method, params, data, opts)}
}

func (_c *MockCustomTgClient_RequestWithContext_Call) Run(run func(ctx context.Context, token string, method string, params map[string]string, data map[string]gotgbot.NamedReader, opts *gotgbot.RequestOpts)) *MockCustomTgClient_RequestWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]string), args[4].(map[string]gotgbot.NamedReader), args[5].(*gotgbot.RequestOpts))
	})
	return _c
}

func (_c *MockCustomTgClient_RequestWithContext_Call) Return(_a0 json.RawMessage, _a1 error) *MockCustomTgClient_RequestWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomTgClient_RequestWithContext_Call) RunAndReturn(run func(context.Context, string, string, map[string]string, map[string]gotgbot.NamedReader, *gotgbot.RequestOpts) (json.RawMessage, error)) *MockCustomTgClient_RequestWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TimeoutContext provides a mock function with given fields: opts
func (_m *MockCustomTgClient) TimeoutContext(opts *gotgbot.RequestOpts) (context.Context, context.CancelFunc) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for TimeoutContext")
	}

	var r0 context.Context
	var r1 context.CancelFunc
	if rf, ok := ret.Get(0).(func(*gotgbot.RequestOpts) (context.Context, context.CancelFunc)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*gotgbot.RequestOpts) context.Context); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(*gotgbot.RequestOpts) context.CancelFunc); ok {
		r1 = rf(opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}

	return r0, r1
}

// MockCustomTgClient_TimeoutContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeoutContext'
type MockCustomTgClient_TimeoutContext_Call struct {
	*mock.Call
}

// TimeoutContext is a helper method to define mock.On call
//   - opts *gotgbot.RequestOpts
func (_e *MockCustomTgClient_Expecter) TimeoutContext(opts interface{}) *MockCustomTgClient_TimeoutContext_Call {
	return &MockCustomTgClient_TimeoutContext_Call{Call: _e.mock.On("TimeoutContext", opts)}
}

func (_c *MockCustomTgClient_TimeoutContext_Call) Run(run func(opts *gotgbot.RequestOpts)) *MockCustomTgClient_TimeoutContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gotgbot.RequestOpts))
	})
	return _c
}

func (_c *MockCustomTgClient_TimeoutContext_Call) Return(_a0 context.Context, _a1 context.CancelFunc) *MockCustomTgClient_TimeoutContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomTgClient_TimeoutContext_Call) RunAndReturn(run func(*gotgbot.RequestOpts) (context.Context, context.CancelFunc)) *MockCustomTgClient_TimeoutContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomTgClient creates a new instance of MockCustomTgClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomTgClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomTgClient {
	mock := &MockCustomTgClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

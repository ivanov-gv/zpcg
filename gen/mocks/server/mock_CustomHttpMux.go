// Code generated by mockery v2.42.3. DO NOT EDIT.

package server

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockCustomHttpMux is an autogenerated mock type for the CustomHttpMux type
type MockCustomHttpMux struct {
	mock.Mock
}

type MockCustomHttpMux_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomHttpMux) EXPECT() *MockCustomHttpMux_Expecter {
	return &MockCustomHttpMux_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: pattern, handler
func (_m *MockCustomHttpMux) Handle(pattern string, handler http.Handler) {
	_m.Called(pattern, handler)
}

// MockCustomHttpMux_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockCustomHttpMux_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - pattern string
//   - handler http.Handler
func (_e *MockCustomHttpMux_Expecter) Handle(pattern interface{}, handler interface{}) *MockCustomHttpMux_Handle_Call {
	return &MockCustomHttpMux_Handle_Call{Call: _e.mock.On("Handle", pattern, handler)}
}

func (_c *MockCustomHttpMux_Handle_Call) Run(run func(pattern string, handler http.Handler)) *MockCustomHttpMux_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Handler))
	})
	return _c
}

func (_c *MockCustomHttpMux_Handle_Call) Return() *MockCustomHttpMux_Handle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCustomHttpMux_Handle_Call) RunAndReturn(run func(string, http.Handler)) *MockCustomHttpMux_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// HandleFunc provides a mock function with given fields: pattern, handler
func (_m *MockCustomHttpMux) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	_m.Called(pattern, handler)
}

// MockCustomHttpMux_HandleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFunc'
type MockCustomHttpMux_HandleFunc_Call struct {
	*mock.Call
}

// HandleFunc is a helper method to define mock.On call
//   - pattern string
//   - handler func(http.ResponseWriter , *http.Request)
func (_e *MockCustomHttpMux_Expecter) HandleFunc(pattern interface{}, handler interface{}) *MockCustomHttpMux_HandleFunc_Call {
	return &MockCustomHttpMux_HandleFunc_Call{Call: _e.mock.On("HandleFunc", pattern, handler)}
}

func (_c *MockCustomHttpMux_HandleFunc_Call) Run(run func(pattern string, handler func(http.ResponseWriter, *http.Request))) *MockCustomHttpMux_HandleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(http.ResponseWriter, *http.Request)))
	})
	return _c
}

func (_c *MockCustomHttpMux_HandleFunc_Call) Return() *MockCustomHttpMux_HandleFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCustomHttpMux_HandleFunc_Call) RunAndReturn(run func(string, func(http.ResponseWriter, *http.Request))) *MockCustomHttpMux_HandleFunc_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *MockCustomHttpMux) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockCustomHttpMux_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockCustomHttpMux_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockCustomHttpMux_Expecter) ServeHTTP(_a0 interface{}, _a1 interface{}) *MockCustomHttpMux_ServeHTTP_Call {
	return &MockCustomHttpMux_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", _a0, _a1)}
}

func (_c *MockCustomHttpMux_ServeHTTP_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockCustomHttpMux_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockCustomHttpMux_ServeHTTP_Call) Return() *MockCustomHttpMux_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCustomHttpMux_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockCustomHttpMux_ServeHTTP_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomHttpMux creates a new instance of MockCustomHttpMux. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomHttpMux(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomHttpMux {
	mock := &MockCustomHttpMux{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
